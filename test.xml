<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" url="spring-core">
    <unit filename="test.java">
    <class><specifier>public</specifier> class <name>test</name> <block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>getnothing</name><parameter_list>()</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&lt;=</operator> <name>n</name></expr>)</condition><block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>getsomething</name><parameter_list>()</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>getthing</name><parameter_list>()</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>()</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>num</name> <init>= <expr><literal type="string">"eeee1"</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>num</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVoid</name><parameter_list>()</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>num</name> <init>= <expr><literal type="string">"num"</literal></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>setString</name><parameter_list>()</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>num</name> <init>= <expr><literal type="string">"num"</literal></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>returnString</name><parameter_list>()</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>num</name> <init>= <expr><literal type="string">"num"</literal></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>
    }</block></class>
    </unit>
    <unit filename="test2.java">
    <class><specifier>public</specifier> class <name>test2</name> <block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>getnothing</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&lt;=</operator> <name>n</name></expr>)</condition><block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>getsomething</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>getthing</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>num</name> <init>= <expr><literal type="string">"eeee1"</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>num</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVoid</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>num</name> <init>= <expr><literal type="string">"num"</literal></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setString</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>num</name> <init>= <expr><literal type="string">"num"</literal></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>returnString</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>num</name> <init>= <expr><literal type="string">"num"</literal></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>
    }</block></class>
    </unit>
</unit>
